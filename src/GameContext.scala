// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Game.sm


class GameContext(owner: Game) extends statemap.FSMContext[GameState] {

    private val _owner: Game = owner

    setState(GameFSM.Starting)

    def GameOver(): Unit = {
        _transition = "GameOver"
        getState().GameOver(this)
        _transition = ""
    }

    def GameTypeChosen(): Unit = {
        _transition = "GameTypeChosen"
        getState().GameTypeChosen(this)
        _transition = ""
    }

    def PickSquare(board: Board, square: Int): Unit = {
        _transition = "PickSquare"
        getState().PickSquare(this, board, square)
        _transition = ""
    }

    def PlayAgain(): Unit = {
        _transition = "PlayAgain"
        getState().PlayAgain(this)
        _transition = ""
    }

    override def enterStartState(): Unit = {
        getState().Entry(this)
    }

    def getOwner(): Game = _owner

}

class GameState(name: String, id: Int) {
    private val _name = name
    private val _id = id

    def getName(): String = _name

    override def toString(): String = _name

    def Entry(context: GameContext): Unit = {}
    def Exit(context: GameContext): Unit = {}

    def GameOver(context: GameContext): Unit = {
        Default(context)
    }

    def GameTypeChosen(context: GameContext): Unit = {
        Default(context)
    }

    def PickSquare(context: GameContext, board: Board, square: Int): Unit = {
        Default(context)
    }

    def PlayAgain(context: GameContext): Unit = {
        Default(context)
    }

    def Default(context: GameContext): Unit = {
        throw new statemap.TransitionUndefinedException(
                "State: " + context.getState()._name +
                ", Transition: " + context.getTransition())
    }

}

private class GameFSM_Default(name: String, id: Int) extends GameState(name, id) {
}

private class GameFSM_Starting(name: String, id: Int) extends GameFSM_Default(name, id) {

    override def Entry (context: GameContext): Unit = {
        val ctxt = context.getOwner()

        ctxt.decideGameType()
    }

    override def GameTypeChosen(context: GameContext): Unit = {
        val ctxt: Game = context.getOwner()


        context.getState().Exit(context)
        context.clearState()
        try {
            ctxt.clearBoard()
        }
        finally {
            context.setState(GameFSM.Player1)
            context.getState().Entry(context)
        }
    }
}

private class GameFSM_Player1(name: String, id: Int) extends GameFSM_Default(name, id) {

    override def Entry (context: GameContext): Unit = {
        val ctxt = context.getOwner()

        ctxt.refreshBoardState()
        ctxt.getNextMove(0, ctxt.board)
    }

    override def GameOver(context: GameContext): Unit = {

        context.getState().Exit(context)
        context.setState(GameFSM.Ending)
        context.getState().Entry(context)
    }

    override def PickSquare(context: GameContext, board: Board, square: Int): Unit = {
        val ctxt: Game = context.getOwner()


        context.getState().Exit(context)
        context.clearState()
        try {
            ctxt.playerMove(0, square)
        }
        finally {
            context.setState(GameFSM.Player2)
            context.getState().Entry(context)
        }
    }
}

private class GameFSM_Player2(name: String, id: Int) extends GameFSM_Default(name, id) {

    override def Entry (context: GameContext): Unit = {
        val ctxt = context.getOwner()

        ctxt.refreshBoardState()
        ctxt.getNextMove(1, ctxt.board)
    }

    override def GameOver(context: GameContext): Unit = {

        context.getState().Exit(context)
        context.setState(GameFSM.Ending)
        context.getState().Entry(context)
    }

    override def PickSquare(context: GameContext, board: Board, square: Int): Unit = {
        val ctxt: Game = context.getOwner()


        context.getState().Exit(context)
        context.clearState()
        try {
            ctxt.playerMove(1, square)
        }
        finally {
            context.setState(GameFSM.Player1)
            context.getState().Entry(context)
        }
    }
}

private class GameFSM_Ending(name: String, id: Int) extends GameFSM_Default(name, id) {

    override def Entry (context: GameContext): Unit = {
        val ctxt = context.getOwner()

        ctxt.decidePlayAgain()
    }

    override def PlayAgain(context: GameContext): Unit = {

        context.getState().Exit(context)
        context.setState(GameFSM.Starting)
        context.getState().Entry(context)
    }
}

private object GameFSM {
    val Starting = new GameFSM_Starting("GameFSM.Starting", 0)
    val Player1 = new GameFSM_Player1("GameFSM.Player1", 1)
    val Player2 = new GameFSM_Player2("GameFSM.Player2", 2)
    val Ending = new GameFSM_Ending("GameFSM.Ending", 3)
    val Default = new GameFSM_Default("GameFSM.Default", -1)
}

